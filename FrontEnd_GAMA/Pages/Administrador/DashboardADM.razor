@page "/adm/dash"
@using FrontEnd_GAMA.Singleton;
@using SuporteFront;
@inject NavigationManager navigation
@inject AdmOperationEntity ops;
@inject HttpClient http;
@inject ILocalStorageService local;
@inject IToastService toast

@if (isAuth)
{
    
    <FrontEnd_GAMA.Components.Logout UserName="@Name">

    </FrontEnd_GAMA.Components.Logout>
    
    <h3>DashboardADM</h3>
    <EditForm Model="@ops" OnSubmit="Navigate">
        <div class="form-row">
            <label for="ops">Operação</label>
            <select @bind=@operation id="ops" required class="custom-select mr-sm-2">
                <option value="add" selected>Adicionar</option>
                <option value="operar">Remover/Editar</option>
            </select>
            <label for="entidade">Entidade:</label>
            <select @bind=@entity id="entidade" required class="custom-select mr-sm-2">
                @if(operation.Equals("add"))
                {
                    <option value="Cidadao">Cidadao</option>
                    <option value="Servidor">Servidor</option>
                    <option value="Secretaria">Secretaria</option>
                    <option value="Cargo">Cargo</option>
                    <option value="Endereco">Endereco</option>
                }
                else
                {
                    <option value="Cidadao">Cidadao</option>
                    <option value="Servidor">Servidor</option>
                    <option value="Secretaria">Secretaria</option>
                    <option value="Reclamacao">Reclamacao</option>
                    <option value="Chamado">Chamado</option>
                    <option value="Cargo">Cargo</option>
                    <option value="Endereco">Endereco</option>
                }

            </select>
        </div>
        <button type="submit" class="btn btn-success">Ir</button>
    </EditForm>
}
else
{
    <FrontEnd_GAMA.Components.SemAutorizacao>

    </FrontEnd_GAMA.Components.SemAutorizacao>
}

@code {
    private bool isAuth = false;
    public string entity = "";
    public string operation = "";
    private string Name { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {


        var value = await local.GetItemAsync<string>("token");
        TokenViewModel token = new TokenViewModel();
        token.token = value;

       

        if (!firstRender && !string.IsNullOrEmpty(value))
            http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", value);

        if(firstRender)toast.ShowInfo("Autenticando");
        var response = await http.PostAsJsonAsync<TokenViewModel>("login/auth", token);

        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            if (firstRender) toast.ShowInfo("Autenticado");
            Name = await response.Content.ReadAsStringAsync();
            isAuth = true;
        }
        else isAuth = false;

        StateHasChanged();
        await base.OnAfterRenderAsync(firstRender);



    }


    public void Navigate()
    {
        ops.Operation = operation;
        ops.Entity = entity;
        navigation.NavigateTo("/adm/dash/" + ops.Operation + "/" + ops.Entity);
    }

}
