@page "/adm/dash/operar/chamado"
@using FrontEnd_GAMA.Singleton;
@using Core.Entities;
@using SuporteFront
@inject NavigationManager navigation
@inject AdmOperationEntity ops;
@inject HttpClient http;
@inject ILocalStorageService local
@inject IToastService toast

@if (isAuth)
{
    <FrontEnd_GAMA.Components.Logout UserName="@Name">

    </FrontEnd_GAMA.Components.Logout>
    <FrontEnd_GAMA.Components.Component>

    </FrontEnd_GAMA.Components.Component>
    @if (Chamados.Count == 0)
    {
        <FrontEnd_GAMA.Components.Loading>

        </FrontEnd_GAMA.Components.Loading>
    }
    else
    {
        <table class="table table-dark">
            <thead>
                <tr>
                    <th scope="col">Comando</th>
                    <th scope="col">Solicitado Por</th>
                    <th scope="col">Endereco</th>
                    <th scope="col">Status</th>

                </tr>
            </thead>
            <tbody>
                @foreach (var chamado in Chamados)
                {
                    <tr>
                        <td><button type="button" class="btn-danger" @onclick="(async () => await AbrirModalDelecao(chamado.Id))">Deletar</button>/
                            <button type="button" class="btn-secondary" disabled>Alterar</button>
                        </td>
                        <td>@chamado.Descricao</td>
                        <td>@chamado.SolicitadoPor.Nome</td>
                        <td>@chamado.SecretariaDestino.Nome</td>
                        <td>@chamado.StatusSolicitacao</td>

                    </tr>

                }
            </tbody>

        </table>
    }

}
else
{
    <FrontEnd_GAMA.Components.SemAutorizacao>

    </FrontEnd_GAMA.Components.SemAutorizacao>
}




@code {
    public List<Chamado> Chamados = new List<Chamado>();
    [CascadingParameter] public IModalService ModalService { get; set; }
    ModalParameters modalParameters = new ModalParameters();
    private bool isAuth = false;
    private string Name { get; set; }

    public void Reload()
    {
        navigation.NavigateTo("/adm/dash/operar/Chamado", true);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var value = await local.GetItemAsync<string>("token");
        TokenViewModel token = new TokenViewModel();
        token.token = value;

        if (!firstRender && !string.IsNullOrEmpty(value))
            http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", value);

        if (firstRender) toast.ShowInfo("Autenticando");

        var response = await http.PostAsJsonAsync<TokenViewModel>("login/auth", token);

        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            if (firstRender) toast.ShowInfo("Autenticado");
            Name = await response.Content.ReadAsStringAsync();
            isAuth = true;
        }
        else isAuth = false;
        if (isAuth)
        {
            var cha = await http.GetFromJsonAsync<IEnumerable<Chamado>>("chamado");
            Chamados = cha.ToList();
            modalParameters.Add("Entity", ops.Entity);
        }

        StateHasChanged();
        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task AbrirModalDelecao(int id)
    {
        modalParameters.Add("Id", id);
        var modal = ModalService.Show<FrontEnd_GAMA.Components.DeleteConfirm>("Deseja Deletar?", modalParameters);
        var result = await modal.Result;

        if (!result.Cancelled) Reload();
    }

}
