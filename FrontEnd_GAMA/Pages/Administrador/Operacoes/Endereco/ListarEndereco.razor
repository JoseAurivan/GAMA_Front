@page "/adm/dash/operar/endereco"
@using FrontEnd_GAMA.Singleton;
@using Core.Entities;
@using SuporteFront
@inject NavigationManager navigation
@inject AdmOperationEntity ops;
@inject HttpClient http;
@inject ILocalStorageService local
@inject IToastService toast
<h3>DashboardADM</h3>
@if(isAuth)
{
    <FrontEnd_GAMA.Components.Logout>

    </FrontEnd_GAMA.Components.Logout>
    <FrontEnd_GAMA.Components.Component>

    </FrontEnd_GAMA.Components.Component>
@if (enderecos.Count == 0)
{
    <FrontEnd_GAMA.Components.Loading>

    </FrontEnd_GAMA.Components.Loading>
    
}
else
{
    <table class="table table-dark">
        <thead>
            <tr>
                <th scope="col">Comando</th>
                <th scope="col">Id</th>
                <th scope="col">Bairro</th>
                <th scope="col">Logradouro</th>
                <th scope="col">Rua</th>
                <th scope="col">CEP</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var endereco in enderecos)
            {
                <tr>
                    <td><button type="button" class="btn btn-danger" onclick="@(async ()=> AbrirModal(@endereco.Id))">Deletar</button>/
                        <button type="button" class="btn btn-secondary" onclick="@(async ()=> AbrirModalAlterar(@endereco.Id))">Alterar</button></td>
                    <td>@endereco.Id</td>
                    <td>@endereco.Bairro</td>
                    <td>@endereco.Logradouro</td>
                    <td>@endereco.Rua</td>
                    <td>@endereco.CEP</td>
                </tr>
            }
        </tbody>

        </table>


    }

}
else
{
    <FrontEnd_GAMA.Components.SemAutorizacao>

    </FrontEnd_GAMA.Components.SemAutorizacao>
}

@code {
    [CascadingParameter] IModalService modalService{ get; set; }
    ModalParameters modalParameters = new ModalParameters();
    public List<Endereco> enderecos = new List<Endereco>();
    public bool isAuth = false;
    public string Name { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var value = await local.GetItemAsync<string>("token");
        TokenViewModel token = new TokenViewModel();
        token.token = value;

        if (!firstRender && !string.IsNullOrEmpty(value))
            http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", value);

        if (firstRender) toast.ShowInfo("Autenticando");

        var response = await http.PostAsJsonAsync<TokenViewModel>("login/auth", token);

        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            if (firstRender) toast.ShowInfo("Autenticado");
            Name = await response.Content.ReadAsStringAsync();
            isAuth = true;
        }
        else isAuth = false;
        if (isAuth)
        {
            if (firstRender) toast.ShowInfo("Listando Endereços");
            var end = await http.GetFromJsonAsync<IEnumerable<Endereco>>("endereco");
            enderecos = end.ToList();
            modalParameters.Add("Entity", ops.Entity);

        }
        StateHasChanged();
        await base.OnAfterRenderAsync(firstRender);
    }

    public void Reload()
    {
        navigation.NavigateTo("/adm/dash/operar/Endereco",true);
    }

    public async Task AbrirModal(int id)
    {
        modalParameters.Add("Id", id);      
        var modal = modalService.Show<FrontEnd_GAMA.Components.DeleteConfirm>("Deletar Endereco?",modalParameters);
        var result = await modal.Result;

        if (!result.Cancelled)
        {           
            Reload();
        }
    }


    public async Task AbrirModalAlterar(int id)
    {
        modalParameters.Add("Id", id);
        var modal = modalService.Show<FrontEnd_GAMA.Components.AlterarEndereco>("Alterar Endereco", modalParameters);
        var result = await modal.Result;

        if (!result.Cancelled)
        {
            Reload();
        }

    }

}
