@page "/adm/dash/operar/servidor"
@using FrontEnd_GAMA.Singleton;
@using Core.Entities;
@using SuporteFront;
@inject NavigationManager navigation
@inject AdmOperationEntity ops;
@inject HttpClient http;
@inject ILocalStorageService local
@inject IToastService toast


@if (isAuth)
{
    <FrontEnd_GAMA.Components.Logout UserName="@Name">

    </FrontEnd_GAMA.Components.Logout>
    <FrontEnd_GAMA.Components.Component>

    </FrontEnd_GAMA.Components.Component>
    <h3>Listar @ops.Entity</h3>

    @if (Servidors.Count == 0)
    {
        <FrontEnd_GAMA.Components.Loading>

        </FrontEnd_GAMA.Components.Loading>
    }
    else
    {
        <table class="table table-dark">
            <thead>
                <tr>
                    <th scope="col">Comando</th>
                    <th scope="col">Id</th>
                    <th scope="col">Nome</th>
                    <th scope="col">Matricula</th>
                    <th scope="col">Email</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var servidor in Servidors)
                {
                    <tr>
                        <td><button type="button" class="btn-danger" @onclick="(async() => await AbrirModal(servidor.Id))">Deletar</button>/
                            <button type="button" class="btn-secondary" @onclick="(async() => await AbrirModalAlterar(servidor.Id))">Alterar</button></td>
                        <td>@servidor.Id</td>
                        <td>@servidor.Nome</td>
                        <td>@servidor.Matricula</td>
                        <td>@servidor.Email</td>
                    </tr>
                }
            </tbody>

        </table>
    }

}
else
{
    <FrontEnd_GAMA.Components.SemAutorizacao>

    </FrontEnd_GAMA.Components.SemAutorizacao>
}

@code {
    public List<Servidor> Servidors = new List<Servidor>();
    ModalParameters modalParameters = new ModalParameters();
    [CascadingParameter] public IModalService ModalService { get; set; }
    private bool isAuth = false;
    private string Name { get; set; }

    public void Reload()
    {
        navigation.NavigateTo("/adm/dash/operar/Servidor", true);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var value = await local.GetItemAsync<string>("token");
        TokenViewModel token = new TokenViewModel();
        token.token = value;

        if (!firstRender && !string.IsNullOrEmpty(value))
            http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", value);

        if (firstRender) toast.ShowInfo("Autenticando");

        var response = await http.PostAsJsonAsync<TokenViewModel>("login/auth", token);

        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            if (firstRender) toast.ShowInfo("Autenticado");
            Name = await response.Content.ReadAsStringAsync();
            isAuth = true;
        }
        else isAuth = false;
        if (isAuth)
        {
            if (firstRender) toast.ShowInfo("Listando Servidores");
            var serv = await http.GetFromJsonAsync<IEnumerable<Servidor>>("servidor");
            Servidors = serv.ToList();
            modalParameters.Add("Entity", ops.Entity);
        }
        StateHasChanged();
        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task AbrirModal(int id)
    {
        modalParameters.Add("Id", id);
        var modal = ModalService.Show<FrontEnd_GAMA.Components.DeleteConfirm>("Deseja Deletar?", modalParameters);
        var result = await modal.Result;
        if (!result.Cancelled)
        {
            Reload();
        }

    }

    public async Task AbrirModalAlterar(int id)
    {
        modalParameters.Add("Id", id);
        var modal = ModalService.Show<FrontEnd_GAMA.Components.AlterarServidor>("Deseja Alterar?", modalParameters);
        var result = await modal.Result;
        if (!result.Cancelled)
        {
            Reload();
        }
    }
}
