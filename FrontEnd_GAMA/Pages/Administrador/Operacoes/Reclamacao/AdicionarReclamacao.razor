@page "/adm/dash/add/reclamacao"
@using FrontEnd_GAMA.Singleton;
@using System.Reflection;
@using Core.Entities;
@using SuporteFront
@inject NavigationManager navigation
@inject AdmOperationEntity ops
@inject ILocalStorageService local
@inject HttpClient http

@if (isAuth)
{
    <FrontEnd_GAMA.Components.Logout UserName="@Name">

    </FrontEnd_GAMA.Components.Logout>
    <FrontEnd_GAMA.Components.Component>

    </FrontEnd_GAMA.Components.Component>

<h3>Adicionar @ops.Entity</h3>

<EditForm Model="reclamacao" OnSubmit="EnviarReclamacao">
    <div class="form-row">
        <div class="form-group col-md-6">
            <lable for="text">Escreva sua reclamacao</lable>
            <InputTextArea id="texto" disabled class="form-control" @bind-Value="reclamacao.Texto"></InputTextArea>
        </div>
    </div>
    <div class="for-row">
        <button type="submit" disabled class="btn btn-primary">Enviar</button>
            <button type="reset" disabled class="btn btn-outline-secondary">Limpar</button>
    </div>
</EditForm>

    <a href="/painel/cidadao"> Voltar </a>
}
else
{
    <FrontEnd_GAMA.Components.SemAutorizacao>

    </FrontEnd_GAMA.Components.SemAutorizacao>
}


@code {

    private Reclamacao reclamacao = new Reclamacao();
    private List<Secretaria> secretarias = new List<Secretaria>();
    private bool isAuth = false;
    private string Name { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var value = await local.GetItemAsync<string>("token");
        TokenViewModel token = new TokenViewModel();
        token.token = value;

        if (!firstRender && !string.IsNullOrEmpty(value))
            http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", value);

        var response = await http.PostAsJsonAsync<TokenViewModel>("login/auth", token);

        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            Name = await response.Content.ReadAsStringAsync();
            isAuth = true;
        }
        else isAuth = false;
        StateHasChanged();
        await base.OnAfterRenderAsync(firstRender);
    }

    private void EnviarReclamacao()
    {
        reclamacao.DataCriacao = DateTime.Now;
        //TODO Pegar id do cidadao logado
        //TODO pegar Id da secretaria atraves de um option
    }

}