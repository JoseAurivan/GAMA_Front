@page "/adm/dash/operar/secretaria"
@using FrontEnd_GAMA.Singleton;
@using Core.Entities;
@using SuporteFront
@inject NavigationManager navigation
@inject AdmOperationEntity ops;
@inject HttpClient http;
@inject ILocalStorageService local
@inject IToastService toast

@if (isAuth)
{
    <FrontEnd_GAMA.Components.Logout UserName="@Name">

    </FrontEnd_GAMA.Components.Logout>
    <FrontEnd_GAMA.Components.Component>

    </FrontEnd_GAMA.Components.Component>
    <h3>Listar @ops.Entity</h3>
    @if (Secretarias.Count == 0)
    {

        <FrontEnd_GAMA.Components.Loading>

        </FrontEnd_GAMA.Components.Loading>
    }
    else
    {
        <table class="table table-dark">
            <thead>
                <tr>
                    <th scope="col">Comando</th>
                    <th scope="col">Id</th>
                    <th scope="col">Nome</th>
                    <th scope="col">Telefone</th>
                    <th scope="col">CNPJ</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var secretaria in Secretarias)
                {
                    <tr>
                        <td>
                            <button type="button" class="btn-outline-danger" disabled @onclick="(async () => await AbrirModalDelecao(secretaria.Id))">Deletar</button>/
                            <button type="button" class="btn-outline-secondary" disabled>Alterar</button>
                        </td>
                        <td>@secretaria.Id</td>
                        <td>@secretaria.Nome</td>
                        <td>@secretaria.Telefone</td>
                        <td>@secretaria.CNPJ</td>
                    </tr>
                }
            </tbody>

        </table>
    }

}
else
{
    <FrontEnd_GAMA.Components.SemAutorizacao>

    </FrontEnd_GAMA.Components.SemAutorizacao>
}

@code {
    public List<Secretaria> Secretarias = new List<Secretaria>();
    [CascadingParameter] public IModalService ModalService { get; set; }
    ModalParameters modalParameters = new ModalParameters();
    private bool isAuth = false;
    public string Name { get; set; }

    public void Reload()
    {
        navigation.NavigateTo("/adm/dash/operar/secretaria", true);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var value = await local.GetItemAsync<string>("token");
        TokenViewModel token = new TokenViewModel();
        token.token = value;

        if (!firstRender && !string.IsNullOrEmpty(value))
            http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", value);

        if (firstRender) toast.ShowInfo("Autenticando");

        var response = await http.PostAsJsonAsync<TokenViewModel>("login/auth", token);

        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            if (firstRender) toast.ShowInfo("Autenticado");
            Name = await response.Content.ReadAsStringAsync();
            isAuth = true;
        }
        else isAuth = false;
        if (isAuth)
        {
            if (firstRender) toast.ShowInfo("Listando Secretarias");
            var sec = await http.GetFromJsonAsync<IEnumerable<Secretaria>>("secretaria");
            Secretarias = sec.ToList();
            modalParameters.Add("Entity", ops.Entity);
        }
        StateHasChanged();
        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task AbrirModalDelecao(int id)
    {
        modalParameters.Add("Id", id);
        var modal = ModalService.Show<FrontEnd_GAMA.Components.DeleteConfirm>("Deseja Deletar?", modalParameters);
        var result = await modal.Result;

        if (!result.Cancelled) Reload();
    }

}
