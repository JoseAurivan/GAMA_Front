@page "/adm/dash/add/cargo"
@using FrontEnd_GAMA.Singleton;
@using Core.Entities;
@using SuporteFront
@inject NavigationManager navigation
@inject AdmOperationEntity ops;
@inject HttpClient http;
@inject ILocalStorageService local
@inject IToastService toast

@if (isAuth)
{
    <FrontEnd_GAMA.Components.Logout UserName="@Name">

    </FrontEnd_GAMA.Components.Logout>
    <FrontEnd_GAMA.Components.Component>

    </FrontEnd_GAMA.Components.Component>

    <h3>Adicionar @ops.Entity</h3>

    <EditForm Model="@cargo" OnSubmit="CriarNovoCargo">
        <div class="form-row">
            <div class="form-group col-md-6">
                <label for="nome">Nome:</label>
                <InputText id="Nome" class="form-control" @bind-Value="cargo.Nome"></InputText>
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col-md-6">
                <label for="cpf">Salario:</label>
                <InputNumber id="Salario" class="form-control" @bind-Value="cargo.Salario"></InputNumber>
            </div>
            <div class="form-group col-md-6">
                <label for="hierarquia">Hierarquia</label>
                <InputSelect id="hierarquia" class="form-select" @bind-Value="cargo.Hierarquia">
                    @foreach (Hierarquia hierarquia in Enum.GetValues(typeof(Hierarquia)))
                    {
                        <option value="@hierarquia">@hierarquia.ToString()</option>
                    }
                </InputSelect>
            </div>
        </div>
        <button type="submit" class="btn btn-success">Cadastrar</button>
        <button type="reset" class="btn btn-outline-warning">Limpar</button>
    </EditForm>
}
else
{
    <FrontEnd_GAMA.Components.SemAutorizacao>

    </FrontEnd_GAMA.Components.SemAutorizacao>
}


@code {
    public Cargo cargo = new Cargo();
    private bool isAuth = false;
    private string Name { get; set; }
    [CascadingParameter] public IModalService ModalService { get; set; }

    public void Reload()
    {
        navigation.NavigateTo("/adm/dash/add/cargo");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var value = await local.GetItemAsync<string>("token");
        TokenViewModel token = new TokenViewModel();
        token.token = value;

        if (!firstRender && !string.IsNullOrEmpty(value))
            http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", value);

        if (firstRender) toast.ShowInfo("Autenticando");

        var response = await http.PostAsJsonAsync<TokenViewModel>("login/auth", token);

        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            if (firstRender) toast.ShowSuccess("Autenticado");
            Name = await response.Content.ReadAsStringAsync();
            isAuth = true;
        }
        else isAuth = false;
        StateHasChanged();
        await base.OnAfterRenderAsync(firstRender);
    }
    public async Task CriarNovoCargo()
    {
        var response = await http.PostAsJsonAsync<Cargo>("cargo",cargo);
        if(response.IsSuccessStatusCode)
        {
            toast.ShowSuccess("Cargo criado com sucesso");
            Reload();
        }
        else
        {
            toast.ShowError("Erro ao criar Cargo");
            var modalScreen = ModalService.Show<FrontEnd_GAMA.Components.ErrorDialog>();
            var result = await modalScreen.Result;
            if (result is not null)
            {
                Reload();
            }
        }
    }

}