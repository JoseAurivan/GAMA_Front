@page "/painel/cidadao"
@inject HttpClient http
@inject ILocalStorageService local
@inject NavigationManager navigation
@inject IToastService toast
@using SuporteFront


@if (isAuth)
{
    <FrontEnd_GAMA.Components.Logout UserName="@cpf">

    </FrontEnd_GAMA.Components.Logout>
    <h3 class="h3">Painel do Cidadao</h3>

    <div class="row">
        <div class="col-sm-6">
            <div class="card">
                <h5 class="card-header">Listar Telefones</h5>
                <div class="card-body">
                    <p class="card-text">Listar telefone de cada umas das Secretarias cadastradas no sistema</p>
                    <a href="painel/cidadao/listartelefone" class="btn btn-primary">Listar</a>
                </div>
            </div>
        </div>
        <div class="col-sm-6">
            <div class="card">
                <h5 class="card-header">Requisitar uma Cesta Basica</h5>
                <div class="card-body">
                    <p class="card-text">Requisite uma cesta básica para você e sua família.</p>
                    <button class="btn btn-outline-primary" disabled>Requisitar</button>
                </div>
            </div>
        </div>
        <div class="col-sm-6">
            <div class="card">
                <h5 class="card-header">Realizar uma Reclamacao</h5>
                <div class="card-body">
                    <p class="card-text">Realize uma reclamacao sobre uma Secretaria.</p>
                    <a href="painel/cidadao/reclamacao" class="btn btn-primary">Criar</a>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <FrontEnd_GAMA.Components.SemAutorizacao>

    </FrontEnd_GAMA.Components.SemAutorizacao>
}
@code {
    private bool isAuth = false;
    private string cpf { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var value = await local.GetItemAsync<string>("token");
        TokenViewModel token = new TokenViewModel();
        token.token = value;

        if (!firstRender && !string.IsNullOrEmpty(value))
            http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", value);

        if (firstRender) toast.ShowInfo("Autenticando");

        try
        {
            var response = await http.PostAsJsonAsync<TokenViewModel>("login/auth", token);

            if (response.StatusCode == System.Net.HttpStatusCode.OK)
            {
                if (firstRender) toast.ShowSuccess("Autenticado");
                cpf = await response.Content.ReadAsStringAsync();
                isAuth = true;
            }
            else isAuth = false;


        }
        catch (Exception)
        {
            toast.ShowError("Erro no servidor, Contate o suporte");
            navigation.NavigateTo("/painel/cidadao", true);
        }
        await base.OnAfterRenderAsync(firstRender);
        StateHasChanged();




    }



}
