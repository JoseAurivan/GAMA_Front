@page "/painel/cidadao/reclamacao"
@using System.Security.Claims;
@inject HttpClient http
@inject NavigationManager navigation
@inject ILocalStorageService local
@inject IToastService toast
@using SuporteFront;
@using Core.Entities
@if (isAuth)
{    
<FrontEnd_GAMA.Components.Logout UserName="@LogadoCPF">

</FrontEnd_GAMA.Components.Logout>

        <EditForm Model="reclamacao" OnSubmit="EnviarReclamacao">

            <div class="form-row">
                <div class="form-group col-md-6">
                    <lable for="text">Escreva sua reclamacao</lable>
                    <InputTextArea id="texto" class="form-control" @bind-Value="reclamacao.Texto"></InputTextArea>
                </div>
                <div class="form-group col-md-6">
                    <lable for="text">Secretaria Destino</lable>
                    <InputSelect id="texto" class="form-control" @bind-Value="reclamacao.SecretariaId">
                        @foreach (var secretaria in secretarias)
                        {
                            <option value="@secretaria.Id">@secretaria.Nome</option>
                        }
                    </InputSelect>
                </div>
            </div>
            <div class="for-row">
                <button type="submit" class="btn btn-primary">Enviar</button>
                <button type="reset" class="btn btn-outline-secondary">Limpar</button>
            </div>
        </EditForm>



    <a href="/painel/cidadao"> Voltar </a>
}
else
{
    <FrontEnd_GAMA.Components.SemAutorizacao>

    </FrontEnd_GAMA.Components.SemAutorizacao>
}
@code {

    private ReclamacaoViewModel reclamacao = new ReclamacaoViewModel();
    private List<Secretaria> secretarias = new List<Secretaria>();
    private string LogadoCPF;
    private bool isAuth = false;
    [CascadingParameter] public IModalService ModalService { get; set; }




    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var value = await local.GetItemAsync<string>("token");
        TokenViewModel token = new TokenViewModel();
        token.token = value;

        if (!firstRender && !string.IsNullOrEmpty(value))
            http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", value);

        if (firstRender) toast.ShowInfo("Autorizando");

        var response = await http.PostAsJsonAsync<TokenViewModel>("login/auth", token);

        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            if (firstRender) toast.ShowSuccess("Autorizado");
            LogadoCPF = await response.Content.ReadAsStringAsync();
            isAuth = true;
        }
        else isAuth = false;


        if (firstRender) toast.ShowInfo("Obtendo Secretarias");
        var sec = await http.GetFromJsonAsync<IEnumerable<Secretaria>>("secretaria");
        if (sec is not null) secretarias = sec.ToList();
        StateHasChanged();
        await base.OnAfterRenderAsync(firstRender);
    }


    private async Task EnviarReclamacao()
    {
        reclamacao.DataCriacao = DateTime.Now;
        reclamacao.AutorCPF = LogadoCPF;
        var response = await http.PostAsJsonAsync<ReclamacaoViewModel>("reclamacao", reclamacao);
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            //TODO alert
            navigation.NavigateTo("/painel/cidadao/reclamacao", true);
        }
        else
        {
            var modalScreen = ModalService.Show<FrontEnd_GAMA.Components.ErrorDialog>();
            var result = await modalScreen.Result;
            if (result is not null)
            {
                navigation.NavigateTo("/painel/cidadao/reclamacao", true);
            }
        }

    }

}
