@page "/painel/servidor/abrirchamado"
@using Core.Entities
@using SuporteFront
@inject ILocalStorageService local
@inject HttpClient http
@inject NavigationManager navigation
@inject IToastService toast

@if (isAuth)
{
    <FrontEnd_GAMA.Components.Logout UserName="@Matricula">

    </FrontEnd_GAMA.Components.Logout>
    <h3>AbrirChamado</h3>
    <EditForm Model="chamado" OnSubmit="RegistraChamado">
        <div class="form-row">
            <div class="form-group col-md-6">
                <label for="descricao">Telefone do Requerente:</label>
                <InputText id="descricao" required placeholder="00000000000 - Apenas Números" class="form-control" @bind-Value="chamado.Telefone"></InputText>
            </div>
            <div class="form-group col-md-6">
                <label for="descricao">Descreva Sua Situação:</label>
                <InputTextArea id="descricao" required class="form-control" @bind-Value="chamado.Descricao"></InputTextArea>
            </div>
            <div class="form-group col-md-6">
                <lable for="text">Secretaria Destino</lable>
                <InputSelect required id="texto" class="form-control" @bind-Value="chamado.SecretariaId">
                    @foreach (var secretaria in secretarias)
                    {
                        <option value="@secretaria.Id">@secretaria.Nome</option>
                    }
                </InputSelect>
            </div>
        </div>
        <div class="form-row">
            <button type="submit" class="btn btn-primary">Enviar</button>
            <button type="reset" class=" btn btn-outline-secondary">Limpar</button>
        </div>
    </EditForm>

    <a href="painel/servidor" class="btn btn-primary">Voltar</a>
}
else
{
    <FrontEnd_GAMA.Components.SemAutorizacao></FrontEnd_GAMA.Components.SemAutorizacao>
}

@code {
    private string Matricula { get; set; }
    private bool isAuth = false;
    private ChamadoViewModel chamado = new ChamadoViewModel();
    public List<Secretaria> secretarias = new List<Secretaria>();

    [CascadingParameter] public IModalService modal { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var value = await local.GetItemAsync<string>("token");
        TokenViewModel token = new TokenViewModel();
        token.token = value;

        if (!firstRender && !string.IsNullOrEmpty(value))
            http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", value);

        if (firstRender) toast.ShowInfo("Autenticando");

        var response = await http.PostAsJsonAsync<TokenViewModel>("login/auth", token);

        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            if (firstRender) toast.ShowSuccess("Autenticado");
            Matricula = await response.Content.ReadAsStringAsync();
            isAuth = true;
        }
        else isAuth = false;

        if(isAuth)
        {
            if (firstRender) toast.ShowInfo("Obtendo Secretarias");
            var sec = await http.GetFromJsonAsync<IEnumerable<Secretaria>>("secretaria");
            secretarias = sec.ToList();
        }
        StateHasChanged();
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task RegistraChamado()
    {
        chamado.Solicitacao = Core.Entities.Abstract.StatusSolicitacao.Aberta;
        chamado.Atendimento = StatusAtendimento.EmDia;
        chamado.DataAbertura = DateTime.Now;
        chamado.Matricula = Matricula;

        toast.ShowInfo("Criando chamado...");

        var response = await http.PostAsJsonAsync<ChamadoViewModel>("chamado", chamado);
        if(response.IsSuccessStatusCode)
        {
            toast.ShowSuccess("Chamado inserido com Sucesso");
            navigation.NavigateTo("/painel/servidor", true);
        }
        else
        {
            toast.ShowError("Não foi possivel salvar o chamado");
            var modalScreen = modal.Show<FrontEnd_GAMA.Components.ErrorDialog>();
            var result = await modalScreen.Result;
            if(result is not null)
            {
                navigation.NavigateTo("/painel/servidor/abrirchamado", true);
            }
        }

    }

}
